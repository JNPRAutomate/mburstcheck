version 1.0;ns junos = "http://xml.juniper.net/junos/*/junos";ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";ns ext = "http://xmlsoft.org/XSLT/namespace";import "../import/junos.xsl";var $connection = jcs:open();template get-ioc-info() {  expr jcs:output( jcs:printf("%s", "\nCG-IOC NPU Stats") );  expr jcs:output( jcs:printf("%4s %4s %4s %10s %10s", "Node", "FPC", "NPU", "Direction", "Drops") );  expr jcs:output( jcs:printf("%s", "-------------------------------------") );  /* loop and return all of the FPC numbers */  /* add additonal matching if needed */  var $cgioc = "SRX5K-4XGE-XFP-A"; /* CG IOC 4x10G */  /* grab info and stats for IOCs on node0 */  var $rpc = {    <rpc> {      <command> {        expr "show chassis hardware models node 0";      }    }  }  var $results = jcs:execute($connection,$rpc);  for-each($results//chassis/chassis-module) {    if (./model-number == $cgioc) {      /* get stats from each np */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $np0-node0-results = {        call rpfe-exe-np-cnt() {          with $np-id = "0";          with $node = "0";          with $fpc = $fpc-id[3];        }      }      var $np1-node0-results = {        call rpfe-exe-np-cnt() {          with $np-id = "1";          with $node = "0";          with $fpc = $fpc-id[3];        }      }      var $np2-node0-results = {        call rpfe-exe-np-cnt() {          with $np-id = "2";          with $node = "0";          with $fpc = $fpc-id[3];        }      }      var $np3-node0-results = {        call rpfe-exe-np-cnt() {          with $np-id = "3";          with $node = "0";          with $fpc = $fpc-id[3];        }      }      copy-of $np0-node0-results;      copy-of $np1-node0-results;      copy-of $np2-node0-results;      copy-of $np3-node0-results;    } else {      /* specified card is not the one we are looking for */    }  }  /* grab info and stats for IOCs on node0 */  var $rpc2 = {    <rpc> {      <command> {            expr "show chassis hardware models node 1";      }    }  }  var $results2 = jcs:execute($connection,$rpc2);  for-each($results2//chassis/chassis-module) {    if (./model-number == $cgioc) {      /* get stats from each np */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $np0-node1-results = {        call rpfe-exe-np-cnt() {          with $np-id = "0";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      var $np1-node1-results = {        call rpfe-exe-np-cnt() {          with $np-id = "1";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      var $np2-node1-results = {        call rpfe-exe-np-cnt() {          with $np-id = "2";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      var $np3-node1-results = {        call rpfe-exe-np-cnt() {          with $np-id = "3";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      copy-of $np0-node1-results;      copy-of $np1-node1-results;      copy-of $np2-node1-results;      copy-of $np3-node1-results;    } else {      /* specified card is not the one we are looking for */    }  }}template get-spc-info() {  expr jcs:output( jcs:printf("%s", "\nNG-SPU XM Stats") );  expr jcs:output( jcs:printf("%4s %4s %4s %10s %10s", "Node", "FPC", "XM", "Direction", "Drops") );  expr jcs:output( jcs:printf("%s", "-------------------------------------") );  var $ngspc = "SRX5K-SPC-4-15-320"; /* NGSPC model number */  var $rpc = {    <rpc> {      <command> {        expr "show chassis hardware models node 0";      }    }  }  var $results = jcs:execute($connection,$rpc);  for-each($results//chassis/chassis-module) {    if (./model-number == $ngspc) {      /* get stats from each xm */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $xm0-node1-results = {        call rpfe-exe-mtip-cge() {          with $node = "0";          with $fpc = $fpc-id[3];        }      }      copy-of $xm0-node1-results;    }  }  var $rpc1 = {    <rpc> {      <command> {        expr "show chassis hardware models node 1";      }    }  }  var $results1 = jcs:execute($connection,$rpc1);  for-each($results1//chassis/chassis-module) {    if (./model-number == $ngspc) {      /* get stats from each xm */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $xm0-node1-results = {        call rpfe-exe-mtip-cge() {          with $node = "1";          with $fpc = $fpc-id[3];        }      }      copy-of $xm0-node1-results;    }  }}template rpfe-exe-xlp-nae($node, $fpc, $pic) {  /* allow this to work in cluster and singularily */  var $rpc = {    <rpc> {      <request-pfe-execute> {        <target> "tnp";        <command> "show xlp nae xaui";        <tnp-name> "node" _ $node _ ".fpc" _ $fpc _ ".pic" _ $pic;      }    }  }}template rpfe-exe-mtip-cge($node, $fpc) {  var $rpc = {    <request-pfe-execute> {      <target> "tnp";      <command> "show mtip-cge 2 statistics";      <tnp-name> "node" _ $node _ ".fpc" _ $fpc ;    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);  for-each($lines) {    var $sane = jcs:regex("^(GOT:   aPAUSEMACCtrlFramesReceived:)(.*)",.);    if ($sane[3] != "") {      var $pause-counter = normalize-space($sane[3]);      expr jcs:output( jcs:printf("%4d %4d %4d %10s %10d", $node, $fpc, "0", "SPU to XM", $pause-counter) );      <xm-stats> {        <node> $node;        <fpc> $fpc;        <value> $pause-counter;        <type> "pause-frames";      }    }  }}template rpfe-exe-np-cnt($np-id, $node, $fpc) {  /* allow this to work in cluster and singularily */  var $rpc = {    <rpc> {      <request-pfe-execute> {        <target> "tnp";        <command> "show np " _ $np-id _ " counters debug";        <tnp-name> "node" _ $node _ ".fpc" _ $fpc;        /*<tnp-name> "fpc" _ $fpc;*/      }    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);  /* using line location specify the ingress or egress */  var $np-ingress-line = 14;  var $np-egress-line = 20;  for-each($lines) {      var $sane = jcs:regex("^(GOT: Dropped packets:)(.*)",.);      if ($sane[3] != "") {        var $stats-counter = normalize-space($sane[3]);    <np-stats> {        <node> $node;        <fpc> $fpc;        <np> $np-id;        <value> $stats-counter;        if (position() == $np-ingress-line) {          <direction> "Ingress";          expr jcs:output( jcs:printf("%4d %4d %4d %10s %10d", $node, $fpc, $np-id, "Ingress", $stats-counter) );        } else if (position() == $np-egress-line) {          <direction> "Egress";          expr jcs:output( jcs:printf("%4d %4d %4d %10s %10d", $node, $fpc, $np-id, "Egress", $stats-counter) );        }      }    }  }}template set-utility-mib($type,$mib-name, $value) {  /* string limited to 947 chars */  var $rpc = <request-snmp-utility-mib-set> {    <object-type> $type;        <instance> $mib-name;    <object-value> $value;  }  call jcs:execute($connection,$rpc);}template clear-utility-mib($type,$mib-name) {  var $rpc = <request-snmp-utility-mib-clear> {    <object-type> $type;        <instance> $mib-name;  }  call jcs:execute($connection,$rpc);}template write-to-file($npstats,$xmstats) {  <op-script-results> {    <xsl:document href="/var/tmp/output-file" append="yes" method="text"> {      <total-np-stats> {        copy-of $npstats;      }    }  }}match / {  if (not($connection)) {    call emit-error($message = "Not able to connect to local device");  }  var $npstats = {    call get-ioc-info();  }  var $xmstats = {    call get-spc-info();  }  <op-script-results> {    <xsl:document href="/var/tmp/output-file" append="no" method="xml"> {      <total-np-stats> {        copy-of $npstats;      }      <total-xm-stats> {        copy-of $xmstats;      }    }    <output> "\n\n Results written as XML to disk /var/tmp/outputfile"; /* retsult output */  }}