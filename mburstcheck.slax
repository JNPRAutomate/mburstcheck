version 1.0;ns junos = "http://xml.juniper.net/junos/*/junos";ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";ns ext = "http://xmlsoft.org/XSLT/namespace";ns bit extension = "http://xml.libslax.org/bit";import "/var/db/scripts/import/junos.xsl";/* Define arguments */var $arguments = {    <argument> {        <name> "output";        <description> "If true is declared then output will be displayed to the console";    }}param $output;/* Global Variables *//* open a connection to the local RE */var $connection = jcs:open();/* specify the output file name */var $output-file = "/var/tmp/mburst-stats.xml";/* function to read in the previously saved stats */template check-prev-stats() {  var $rpc = {    <rpc> {      <file-show> {        <filename> $output-file;        <encoding> "raw";      }    }  }  var $results = jcs:execute($connection,$rpc);  expr jcs:output($results//message);  if ($results//message) {    expr jcs:output("Unable to open stats file, assuming no delta");    <stats> {        <total-np-stats>;        <total-xm-stats>;        <total-spu-stats>;    }  } else {    var $stats = document($output-file);    copy-of $stats;  }}template get-current-time() {  var $rpc = {    <get-system-uptime-information>;  }  var $result = ext:node-set(jcs:execute($connection,$rpc));  <isotime> $result//current-time/date-time;  <seconds> $result//current-time/date-time/@junos:seconds;}/* function to gather stats from ioc cards */template get-ioc-info() {  if ($output == "true") {    expr jcs:output( jcs:printf("%s", "\nCG-IOC NPU Stats") );    expr jcs:output( jcs:printf("%4s %4s %4s %10s %16s", "Node", "FPC", "NPU", "Direction", "Drops") );    expr jcs:output( jcs:printf("%s", "-------------------------------------------") );  }  /* loop and return all of the FPC numbers */  /* add additonal matching if needed */  var $cgioc = "SRX5K-4XGE-XFP-A"; /* CG IOC 4x10G */  /* grab info and stats for IOCs on node0 */  var $rpc = {    <rpc> {      <command> {        expr "show chassis hardware models node 0";      }    }  }  var $results = jcs:execute($connection,$rpc);  for-each($results//chassis/chassis-module) {    if (./model-number == $cgioc) {      /* get stats from each np */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $np0-node0-results = {        call rpfe-exe-np-cnt-sp() {          with $np-id = "0";          with $node = "0";          with $fpc = $fpc-id[3];        }      }      var $np1-node0-results = {        call rpfe-exe-np-cnt-sp() {          with $np-id = "1";          with $node = "0";          with $fpc = $fpc-id[3];        }      }      var $np2-node0-results = {        call rpfe-exe-np-cnt-sp() {          with $np-id = "2";          with $node = "0";          with $fpc = $fpc-id[3];        }      }      var $np3-node0-results = {        call rpfe-exe-np-cnt-sp() {          with $np-id = "3";          with $node = "0";          with $fpc = $fpc-id[3];        }      }      copy-of $np0-node0-results;      copy-of $np1-node0-results;      copy-of $np2-node0-results;      copy-of $np3-node0-results;    } else {      /* specified card is not the one we are looking for */    }  }  /* grab info and stats for IOCs on node1 */  var $rpc2 = {    <rpc> {      <command> {            expr "show chassis hardware models node 1";      }    }  }  var $results2 = jcs:execute($connection,$rpc2);  for-each($results2//chassis/chassis-module) {    if (./model-number == $cgioc) {      /* get stats from each np */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $np0-node1-results = {        call rpfe-exe-np-cnt-sp() {          with $np-id = "0";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      var $np1-node1-results = {        call rpfe-exe-np-cnt-sp() {          with $np-id = "1";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      var $np2-node1-results = {        call rpfe-exe-np-cnt-sp() {          with $np-id = "2";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      var $np3-node1-results = {        call rpfe-exe-np-cnt-sp() {          with $np-id = "3";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      copy-of $np0-node1-results;      copy-of $np1-node1-results;      copy-of $np2-node1-results;      copy-of $np3-node1-results;    } else {      /* specified card is not the one we are looking for */    }  }}/* function to gather stats from spc cards */template get-spc-info() {  if ($output == "true") {    expr jcs:output( jcs:printf("%s", "\nNG-SPC XM Stats") );    expr jcs:output( jcs:printf("%4s %4s %8s %10s %16s", "Node", "FPC", "XM/(SPU)", "Direction", "Drops") );    expr jcs:output( jcs:printf("%s", "-----------------------------------------------") );  }  var $ngspc = "SRX5K-SPC-4-15-320"; /* NGSPC model number */  var $rpc = {    <rpc> {      <command> {        expr "show chassis hardware models node 0";      }    }  }  var $results = jcs:execute($connection,$rpc);  for-each($results//chassis/chassis-module) {    if (./model-number == $ngspc) {      /* get stats from each xm */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $xm0-node0-ifd-results = {        call rpfe-exe-xm-ifd() {          with $node = "0";          with $fpc = $fpc-id[3];        }      }      copy-of $xm0-node0-ifd-results;    }  }  var $rpc1 = {    <rpc> {      <command> {        expr "show chassis hardware models node 1";      }    }  }  var $results1 = jcs:execute($connection,$rpc1);  for-each($results1//chassis/chassis-module) {    if (./model-number == $ngspc) {      /* get stats from each xm */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $xm0-node1-ifd-results = {        call rpfe-exe-xm-ifd() {          with $node = "1";          with $fpc = $fpc-id[3];        }      }      copy-of $xm0-node1-ifd-results;    }  }}/* function to gather stats from spus */template get-spu-info() {  if ($output == "true") {    expr jcs:output( jcs:printf("%s", "\nPause Stats") );    expr jcs:output( jcs:printf("%4s %4s %8s %10s %16d", "Node", "FPC", "SPU/(CGE)", "Direction", "Drops") );    expr jcs:output( jcs:printf("%s", "------------------------------------------------") );  }  var $ngspc = "SRX5K-SPC-4-15-320"; /* NGSPC model number */  var $rpc = {    <rpc> {      <command> {        expr "show chassis hardware models node 0";      }    }  }  var $results = jcs:execute($connection,$rpc);  for-each($results//chassis/chassis-module) {    if (./model-number == $ngspc) {      /* get stats from each spu */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $spu0-node0-results = {        call rpfe-exe-xlp-nae() {          with $node = "0";          with $fpc = $fpc-id[3];          with $pic = "0";        }      }      var $spu1-node0-results = {        call rpfe-exe-xlp-nae() {          with $node = "0";          with $fpc = $fpc-id[3];          with $pic = "1";        }      }      var $spu2-node0-results = {        call rpfe-exe-xlp-nae() {          with $node = "0";          with $fpc = $fpc-id[3];          with $pic = "2";        }      }      var $spu3-node0-results = {        call rpfe-exe-xlp-nae() {          with $node = "0";          with $fpc = $fpc-id[3];          with $pic = "3";        }      }      var $xm0-node0-results = {        call rpfe-exe-mtip-q() {          with $node = "0";          with $fpc = $fpc-id[3];        }      }      copy-of $spu0-node0-results;      copy-of $spu1-node0-results;      copy-of $spu2-node0-results;      copy-of $spu3-node0-results;      copy-of $xm0-node0-results;    }  }  var $rpc1 = {    <rpc> {      <command> {        expr "show chassis hardware models node 1";      }    }  }  var $results1 = jcs:execute($connection,$rpc1);  for-each($results1//chassis/chassis-module) {    if (./model-number == $ngspc) {      /* get stats from each spu */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $spu0-node1-results = {        call rpfe-exe-xlp-nae() {          with $node = "1";          with $fpc = $fpc-id[3];          with $pic = "0";        }      }      var $spu1-node1-results = {        call rpfe-exe-xlp-nae() {          with $node = "1";          with $fpc = $fpc-id[3];          with $pic = "1";        }      }      var $spu2-node1-results = {        call rpfe-exe-xlp-nae() {          with $node = "1";          with $fpc = $fpc-id[3];          with $pic = "2";        }      }      var $spu3-node1-results = {        call rpfe-exe-xlp-nae() {          with $node = "1";          with $fpc = $fpc-id[3];          with $pic = "3";        }      }      var $xm0-node1-results = {        call rpfe-exe-mtip-q() {          with $node = "1";          with $fpc = $fpc-id[3];        }      }      copy-of $spu0-node1-results;      copy-of $spu1-node1-results;      copy-of $spu2-node1-results;      copy-of $spu3-node1-results;      copy-of $xm0-node1-results;    }  }}/* function to run pfe command show xmchip 0 ifd list 1 */template rpfe-exe-xm-ifd($node,$fpc) {  var $rpc = {    <rpc> {      <request-pfe-execute> {        <target> "tnp";        <command> "show xmchip 0 ifd list 1";        <tnp-name> "node" _ $node _ ".fpc" _ $fpc;      }    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);  <qnode-stats> {    for-each($lines) {      var $line = normalize-space(.);      var $sane = jcs:regex("GOT: \.spu([0-9]{1})\/([0-9]{1}) ([0-9]*) ([0-9]*) WAN ([0-9]*) ([0-9]*) ([0-9]*)",$line);      var $spuid = $sane[2];      var $spuchan = $sane[3];      var $queueid = $sane[7];      if ($spuchan == 0) {        /* Check q-node stats */        var $qnode = {          call rpfe-exe-xm-qns() {            with $node = $node;            with $fpc = $fpc;            with $queue = $queueid;          }        }        copy-of $qnode;        var $qstats = {          <qnode-stats> {            copy-of $qnode;          }        }        var $nodes = ext:node-set($qstats);        var $xmid = "0/" _ $spuid;        if ($output == "true") {          expr jcs:output( jcs:printf("%4d %4d %8d %10s %16d", $node, $fpc, $xmid , "SPU Q-Node", sum($nodes//value)));        }      }    }  }}/* function to run pfe command show xmchip 0 q-node stats 0 queue */template rpfe-exe-xm-qns($node,$fpc,$queue) {  var $rpc = {    <rpc> {      <request-pfe-execute> {        <target> "tnp";        <command> "show xmchip 0 q-node stats 0 " _ $queue;        <tnp-name> "node" _ $node _ ".fpc" _ $fpc;      }    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);    for-each($lines) {      var $line = normalize-space(.);      var $sane = jcs:regex(" ([0-9]{1}) WRED drops ([0-9]*) Packets ([0-9]*) ([0-9]*) pps",$line);      if ($sane[2] != "") {        <qnode> {          <node> $node;          <fpc>  $fpc;          <xmchip> "0";          <queue> $queue;          <color> $sane[2];          <value> $sane[4];        }    }  }}/* function to run pfe command show xlp nae xaui */template rpfe-exe-xlp-nae($node, $fpc, $pic) {  /* allow this to work in cluster and singularily */  var $rpc = {    <rpc> {      <request-pfe-execute> {        <target> "tnp";        <command> "show xlp nae xaui";        <tnp-name> "node" _ $node _ ".fpc" _ $fpc _ ".pic" _ $pic;      }    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);  for-each($lines) {    var $sane = jcs:regex("^(GOT: Tx Pause Frame:)(.*)",.);    if ($sane[3] != "") {      var $pause-counter = normalize-space($sane[3]);      if ($output == "true") {        expr jcs:output( jcs:printf("%4d %4d %8d %10s %16d", $node, $fpc, $pic, "XM to SPU", $pause-counter) );      }      <xlr-stats> {        <node> $node;        <fpc> $fpc;        <pic> $pic;        <value> $pause-counter;        <type> "pause-frames-xlp-nae";      }    }  }}/* function to run pfe command show mtip-cge summary */template rpfe-exe-mtip-q($node,$fpc) {  var $rpc = {    <rpc> {      <request-pfe-execute> {        <target> "tnp";        <command> "show mtip-cge summary";        <tnp-name> "node" _ $node _ ".fpc" _ $fpc;      }    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);  <mtip-cge-stats> {    for-each($lines) {      var $line = normalize-space(.);      var $sane = jcs:regex("([0-9]+) mtip_cge\.[0-9]{1}\.[0-9]{1}.[0-9]* [0-9]+ [0-9]+ \.spu([0-9]{1})\/([0-9]{1}).*",$line);      var $spuid = $sane[3];      var $spuchan = $sane[4];      var $cge = $sane[2];      if ($spuchan == 0) {        /* Check q-node stats */        var $qnode = {          call rpfe-exe-mtip-cge() {            with $node = $node;            with $fpc = $fpc;            with $spuid = $spuid;            with $cge = $cge;          }        }        copy-of $qnode;      }    }  }}/* function to run pfe command show mtip-cge statistics */template rpfe-exe-mtip-cge($node, $fpc, $spuid, $cge) {  var $rpc = {    <request-pfe-execute> {      <target> "tnp";      <command> "show mtip-cge " _ $cge _ " statistics";      <tnp-name> "node" _ $node _ ".fpc" _ $fpc ;    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);  for-each($lines) {    var $sane = jcs:regex("^(GOT:   aPAUSEMACCtrlFramesReceived:)(.*)",.);    if ($sane[3] != "") {      var $pause-counter = normalize-space($sane[3]);      var $xmid = $spuid _ "/" _ $cge;      if ($output == "true") {        expr jcs:output( jcs:printf("%4d %4d %8d %10s %16d", $node, $fpc, $xmid, "SPU to XM", $pause-counter) );      }      <cge-stats> {        <node> $node;        <fpc> $fpc;        <cge> $cge;        <value> $pause-counter;        <type> "pause-frames-mtip";      }    }  }}/* function to run pfe command show np np-id counters special */template rpfe-exe-np-cnt-sp($np-id, $node, $fpc) {  /* allow this to work in cluster and singularily */  var $rpc = {    <rpc> {      <request-pfe-execute> {        <target> "tnp";        <command> "show np " _ $np-id _ " counters special";        <tnp-name> "node" _ $node _ ".fpc" _ $fpc;        /*<tnp-name> "fpc" _ $fpc;*/      }    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);  /* using line location specify the ingress or egress */  for-each($lines) {      var $line = normalize-space(.);      var $sane = jcs:regex("GOT: EBDMA discard counter 0 .0x17ff80. : (.*)",$line);      if ($sane[2] != "") {        var $discard-counter = {          call convert-hex2dec(){            with $hex = normalize-space($sane[2]);          }        }        if ($output == "true") {          expr jcs:output( jcs:printf("%4d %4d %4d %10s %16d", $node, $fpc, $np-id, "Ingress", $discard-counter) );        }      <np-stats> {        <node> $node;        <fpc> $fpc;        <np> $np-id;        <type> "discard";        <value> $discard-counter;      }    }  }}/* function convert hex output from command to dec */template convert-hex2dec($hex) {  /* 0x00000000 is the only hex len supported */  var $split = jcs:regex("0x([0-9a-zA-Z]{1})([0-9a-zA-Z]{1})([0-9a-zA-Z]{1})([0-9a-zA-Z]{1})([0-9a-zA-Z]{1})([0-9a-zA-Z]{1})([0-9a-zA-Z]{1})([0-9a-zA-Z]{1})",$hex);  var $val0 = {    call convert-char2int() {      with $char = $split[2];    }  }  var $val1 = {    call convert-char2int() {      with $char = $split[3];    }  }  var $val2 = {    call convert-char2int() {      with $char = $split[4];    }  }  var $val3 = {    call convert-char2int() {      with $char = $split[5];    }  }  var $val4 = {    call convert-char2int() {      with $char = $split[6];    }  }  var $val5 = {    call convert-char2int() {      with $char = $split[7];    }  }  var $val6 = {    call convert-char2int() {      with $char = $split[8];    }  }  var $val7 = {    call convert-char2int() {      with $char = $split[9];    }  }  var $dec-val = ($val0 * 268435456) + ($val1 * 16777216) + ($val2 * 1048576) + ($val3 * 65536) + ($val4 * 4096) + ($val5 * 256) + ($val6 * 16) + ($val7 * 1);  <result> $dec-val;}/* function convert hex char to ints */template convert-char2int($char) {  if ($char = "a") {    <result> 10;  } else if ($char = "b") {    <result> 11;  } else if ($char = "c") {    <result> 12;  } else if ($char = "d") {    <result> 13;  } else if ($char = "e") {    <result> 14;  } else if ($char = "f") {    <result> 15;  } else {    <result> $char;  }}/* function set utility mib */template set-utility-mib($type,$mib-name, $value) {  /* string limited to 947 chars */  var $rpc = <request-snmp-utility-mib-set> {    <object-type> $type;        <instance> $mib-name;    <object-value> $value;  }  expr jcs:execute($connection,$rpc);}/* function clear utility mib */template clear-utility-mib($type,$mib-name) {  var $rpc = <request-snmp-utility-mib-clear> {    <object-type> $type;        <instance> $mib-name;  }  expr jcs:execute($connection,$rpc);}/* function calculate diff */template calculate-diff($old,$new) {  var $diff = $new - $old;  if (number($new) == $new) {    <new> $new;  } else {    <new> "0";  }  if (number($old) == $old) {    <old> $old;  } else {    <old> "0";  }  if (number($diff) == $diff) {    <diff> $diff;  } else {    <diff> "0";  }}/* function main */match / {  if (not($connection)) {    call emit-error($message = "Not able to connect to local device");  }  var $time = {    call get-current-time();  }  var $timenodes = ext:node-set($time);  var $old-stats = {    call check-prev-stats();  }  var $old-stats-xml = ext:node-set($old-stats);  var $iocstats = {    call get-ioc-info();  }  var $iocstatsnodes = ext:node-set($iocstats);  var $spcstats = {    call get-spc-info();  }  var $spcstatsnodes = ext:node-set($spcstats);  var $spustats = {    call get-spu-info();  }  var $spustatsnodes = ext:node-set($spustats);  /* Calculate diff */  /* Sum stats on value and by type */  /* set each into its own utility mib */  /* full values stored in the xml file */  var $iocdiff = {    call calculate-diff() {      with $old = sum($old-stats-xml//total-np-stats//value);      with $new = sum($iocstatsnodes//value);    }  }  var $iocdiffnodes = ext:node-set($iocdiff);  var $spcdiff = {    call calculate-diff() {      with $old = sum($old-stats-xml//total-xm-stats//value);      with $new = sum($spcstatsnodes//value);    }  }  var $spcdiffnodes = ext:node-set($spcdiff);  var $spudiff = {    call calculate-diff() {      with $old = sum($old-stats-xml//total-spu-stats//value);      with $new = sum($spustatsnodes//value);    }  }  var $spudiffnodes = ext:node-set($spudiff);  if ($output == "true") {    expr jcs:output( jcs:printf("%s", "\nPacket Stats Diff") );    expr jcs:output( jcs:printf("%18s %16s %16s %6s", "Last", "Current", "Diff", "Type") );    expr jcs:output( jcs:printf("%s", "-------------------------------------------------------------") );    expr jcs:output( jcs:printf("%18d %16d %16d %6s", $iocdiffnodes/old, $iocdiffnodes/new, $iocdiffnodes/diff, "IOC") );    expr jcs:output( jcs:printf("%18d %16d %16d %6s", $spcdiffnodes/old, $spcdiffnodes/new, $spcdiffnodes/diff, "SPC") );    expr jcs:output( jcs:printf("%18d %16d %16d %6s", $spudiffnodes/old, $spudiffnodes/new, $spudiffnodes/diff, "Pause") );  }  /* set utility mib */  call set-utility-mib(){    with $type = "integer";    with $mib-name = "iocdrops";    with $value = $iocdiffnodes/diff;  }  call set-utility-mib(){    with $type = "integer";    with $mib-name = "spcdrops";    with $value = $spcdiffnodes/diff;  }  call set-utility-mib(){    with $type = "integer";    with $mib-name = "pause";    with $value = $spudiffnodes/diff;  }  <op-script-results> {    <xsl:document href=$output-file append="no" method="xml"> {      <stats> {        <timestamp-iso> $timenodes/isotime;        <timestamp-seconds> $timenodes/seconds;        <total-np-stats> {          copy-of $iocstats;        }        <total-xm-stats> {          copy-of $spcstats;        }        <total-spu-stats> {          copy-of $spustats;        }      }    }  }}