version 1.0;ns junos = "http://xml.juniper.net/junos/*/junos";ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";ns ext = "http://xmlsoft.org/XSLT/namespace";import "../import/junos.xsl";var  $connection = jcs:open();template rpfe-exe-np-cnt($np-id, $node, $fpc) {  var $rpc = {    <rpc> {      <request-pfe-execute> {        <target> "tnp";        <command> "show np " _ $np-id _ " counters debug";        <tnp-name> "node" _ $node _ ".fpc" _ $fpc;        /*<tnp-name> "fpc" _ $fpc;*/      }    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);  var $np-ingress-line = 14;  var $np-egress-line = 20;  for-each($lines) {      var $sane = jcs:regex("^(GOT: Dropped packets:)(.*)",.);      if ($sane[3] != "") {        var $stats-counter = normalize-space($sane[3]);    <np-stats> {        <fpc> $fpc;        <np> $np-id;        <value> $stats-counter;        if (position() == $np-ingress-line) {          <direction> "Ingress";        } else if (position() == $np-egress-line) {          <direction> "Egress";        }      }    }  }}template get-ioc-info () {  /* loop and return all of the FPC numbers */  var $cgioc = "SRX5K-4XGE-XFP-A"; /* grab string to match for correct IOC type */  var $rpc = {    <rpc> {      <get-chassis-inventory> {        <models> {        }      }    }  }  var $results = jcs:execute($connection,$rpc);  for-each($results//chassis/chassis-module) {    if (./model-number == $cgioc) {      /* get stats from each np */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      var $np0-results = {        call rpfe-exe-np-cnt() {          with $np-id = "0";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      var $np1-results = {        call rpfe-exe-np-cnt() {          with $np-id = "1";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      var $np2-results = {        call rpfe-exe-np-cnt() {          with $np-id = "2";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      var $np3-results = {        call rpfe-exe-np-cnt() {          with $np-id = "3";          with $node = "1";          with $fpc = $fpc-id[3];        }      }      copy-of $np0-results;      copy-of $np1-results;      copy-of $np2-results;      copy-of $np3-results;    } else {      /* specified card is not the one we are looking for */    }  }}template set-utility-mib() {}template write-to-file($string-content) {  <op-script-results> {    <xsl:document href="/var/tmp/output-file" append="yes" method="text"> {      <total-np-stats> {        expr $string-content;      }    }  }}match / {  /*  get current data for both nodes  get all iocs on current node  loop through each ioc  loop through each np on each ioc  concat results or something like that  */  if (not($connection)) {    call emit-error($message = "Not able to connect to local device");  }  var $str = {    call get-ioc-info();  }  <op-script-results> {    <xsl:document href="/var/tmp/output-file" append="no" method="xml"> {      <total-np-stats> {        copy-of $str;      }    }    <output> "Results written to disk /var/tmp/outputfile"; /* retsult output */  }}