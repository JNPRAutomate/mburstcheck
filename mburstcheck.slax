version 1.0;ns junos = "http://xml.juniper.net/junos/*/junos";ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";ns ext = "http://xmlsoft.org/XSLT/namespace";import "../import/junos.xsl";var  $connection = jcs:open();template rpfe-exe-np-cnt($np-id, $node, $fpc) {  var $rpc = {    <rpc> {      <request-pfe-execute> {        <target> "tnp";        <command> "show np " _ $np-id _ " counters debug";        /*<tnp-name> "node" _ $node _ ".fpc" _ $fpc;*/        <tnp-name> "fpc" _ $fpc;      }    }  }  var $results = jcs:execute($connection,$rpc);  var $lines = jcs:break-lines($results);  for-each($lines) {    var $sane = jcs:regex("^(Dropped packets:)(.*)",.);    if ($sane[3] != "") {      var $food1 = normalize-space($sane[3]);      var $food = "FOO " _ $food1;      expr jcs:output($food);      expr jcs:output(position());      <np-id> $np-id;      <value> $food;    }  }}template get-ioc-info () {  /* loop and return all of the FPC numbers */  var $cgioc = "SRX5k DPC 40x 1GE"; /* grab string to match for FPC type */  var $rpc = {    <rpc> {      <get-chassis-inventory> {        <models> {        }      }    }  }  var $results = jcs:execute($connection,$rpc);  for-each($results//chassis/chassis-module) {    if (./description == $cgioc) {      /* get stats from each np */      var $fpc-id = jcs:regex("^(FPC )(.*)",./name);      expr jcs:output($fpc-id[3]);      expr jcs:output(./model-number);      var $cheese = { call rpfe-exe-np-cnt() {        with $np-id = "0";        with $node = "1";        with $fpc = $fpc-id[3];      } }      expr jcs:output($cheese);      call rpfe-exe-np-cnt() {        with $np-id = "1";        with $node = "1";        with $fpc = $fpc-id[3];      }      call rpfe-exe-np-cnt() {        with $np-id = "2";        with $node = "1";        with $fpc = $fpc-id[3];      }      call rpfe-exe-np-cnt() {        with $np-id = "3";        with $node = "1";        with $fpc = $fpc-id[3];      }    }  }}template set-utility-mib() {}template write-to-file() {}match / {  /*  get current data for both nodes  get all iocs on current node  loop through each ioc  loop through each np on each ioc  concat results or something like that  */  if (not($connection)) {    call emit-error($message = "Not able to connect to local device");  }  call get-ioc-info();  <op-script-results> {    <output> "foo"; /* retsult output */  }}